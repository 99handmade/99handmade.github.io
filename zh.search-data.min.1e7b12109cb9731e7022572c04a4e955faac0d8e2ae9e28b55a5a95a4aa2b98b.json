[{"id":0,"href":"/zh/posts/backup-mongodb/","title":"备份MongoDB","section":"博客","content":" 简介 # MongoDB部署在Docker容器中, 定时任务用于自动备份. 由于数据库部署在容器中, 我们可以选择单独运行临时的数据库容器, 也可以直接使用现有的数据库容器, 具体的选择是仁者见仁的问题. 个人而言, 我选择了前者.\nUbuntu版本\nlsb_release -a LSB Version: core-11.1.0ubuntu4-noarch:security-11.1.0ubuntu4-noarch Distributor ID: Ubuntu Description: Ubuntu 22.04.2 LTS Release: 22.04 Codename: jammy Bash版本\nbash --version GNU bash, version 5.1.16(1)-release (x86_64-pc-linux-gnu) Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt; Docker版本\nClient: Docker Engine - Community Version: 24.0.1 API version: 1.43 Go version: go1.20.4 Git commit: 6802122 Built: Fri May 19 18:06:21 2023 OS/Arch: linux/amd64 Context: default Server: Docker Engine - Community Engine: Version: 24.0.1 API version: 1.43 (minimum version 1.12) Go version: go1.20.4 Git commit: 463850e Built: Fri May 19 18:06:21 2023 OS/Arch: linux/amd64 Experimental: false containerd: Version: 1.6.21 GitCommit: 3dce8eb055cbb6872793272b4f20ed16117344f8 runc: Version: 1.1.7 GitCommit: v1.1.7-0-g860f061 docker-init: Version: 0.19.0 GitCommit: de40ad0 MongoDB版本\nMongoDB shell version v4.4.19 MongoDB server version: 4.4.19 步骤 # 创建备份脚本 # 在这个实例脚本中, MongoDB有一个以上的数据库, 每个数据库都有各自的用户和密码保护. 备份按星期号, 日期组织在文件夹中, 备份在Docker容器中进行, 通过volume直接写在本机硬盘. 需要指出的是, 为了实现在另一个数据库容器中备份, 新容器需要连接到现有的Docker网络中.\n#!/bin/bash # display environment information echo \u0026#34;$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) - Starting the script...\u0026#34; echo \u0026#34;Current Date and Time: $(date)\u0026#34; echo \u0026#34;Current User: $(whoami)\u0026#34; echo \u0026#34;Current Directory: $(pwd)\u0026#34; echo \u0026#34;Login Shell: $SHELL\u0026#34; echo \u0026#34;\u0026#34; # display system information echo \u0026#34;Operating System: $(uname -s)\u0026#34; echo \u0026#34;Hostname: $(hostname)\u0026#34; echo \u0026#34;Kernel Version: $(uname -r)\u0026#34; echo \u0026#34;Processor Architecture: $(uname -m)\u0026#34; echo \u0026#34;\u0026#34; # def DATE=$(date +%d%m%Y_%H%M) WEEK=$(date +%W) BACKUP_DIR=\u0026#34;/data/db_backup/$WEEK\u0026#34; BACKUP_NAME=\u0026#34;$DATE\u0026#34; # directory permission mkdir -p $BACKUP_DIR/$BACKUP_NAME chown -R 999:999 $BACKUP_DIR/$BACKUP_NAME # define database credentials declare -A credentials=( [\u0026#34;db_name_1\u0026#34;]=\u0026#34;username_1:password_1\u0026#34; [\u0026#34;db_name_2\u0026#34;]=\u0026#34;username_2:password_2\u0026#34; ) # run backup for db_name in \u0026#34;${!credentials[@]}\u0026#34;; do echo \u0026#34;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; start to backup $db_name \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026#34; IFS=\u0026#39;:\u0026#39; read -r username password \u0026lt;\u0026lt;\u0026lt; \u0026#34;${credentials[$db_name]}\u0026#34; docker run -u $(id -u):$(id -g) --rm --network mongodb_mongo_net -v $BACKUP_DIR/$BACKUP_NAME:/workdir -w /workdir \\ mongo:4.4.19 mongodump --out /workdir \\ --db=$db_name --username $username --password $password --host=bewellconnect-mongodb --authenticationDatabase=$db_name echo \u0026#34;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; end to backup $db_name \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026#34; echo \u0026#34;\u0026#34; done echo \u0026#34;$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) - Script execution complete.\u0026#34; 创建清理脚本 # 只保留一周的备份, 其他的都删除.\n#!/bin/bash # display environment information echo \u0026#34;$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) - Starting the script...\u0026#34; echo \u0026#34;Current Date and Time: $(date)\u0026#34; echo \u0026#34;Current User: $(whoami)\u0026#34; echo \u0026#34;Current Directory: $(pwd)\u0026#34; echo \u0026#34;Login Shell: $SHELL\u0026#34; echo \u0026#34;\u0026#34; # display system information echo \u0026#34;Operating System: $(uname -s)\u0026#34; echo \u0026#34;Hostname: $(hostname)\u0026#34; echo \u0026#34;Kernel Version: $(uname -r)\u0026#34; echo \u0026#34;Processor Architecture: $(uname -m)\u0026#34; echo \u0026#34;\u0026#34; #def BACKUP_DIR=\u0026#34;/data/db_backup\u0026#34; # get current week number current_week=$(date +%W) # run cleanup for dir in \u0026#34;$BACKUP_DIR\u0026#34;/*/; do dir_name=$(basename \u0026#34;$dir\u0026#34;) if [ \u0026#34;${dir_name}\u0026#34; \\\u0026lt; \u0026#34;${current_week}\u0026#34; ]; then echo \u0026#34;delete backup: $dir\u0026#34; rm -rf \u0026#34;$dir\u0026#34; fi done echo \u0026#34;$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) - Script execution complete.\u0026#34; 修改脚本权限 # 定时任务以创建定时任务的用户身份执行脚本, 这个权限可以根据具体情况而定, 这里我们给脚本所有用户的执行权限.\nchmod +x script.sh 创建Cron文件 # 有很多可以放Cron配置的地方, 这里我们创建一个文件名为db的文件 放到/etc/cron.d/文件夹里, 脚本执行的标准输出流和错误流, 重定向到日志文件. 每天凌晨三点执行一次备份, 每周日凌晨四点执行一次清理, 清除一周以前的备份.\n00 03 * * * root /bin/bash /opt/devops/mongodb/crons/backup_mongodb.sh \u0026gt;\u0026gt; /opt/devops/mongodb/crons/db_backup.log 2\u0026gt;\u0026amp;1 00 04 * * 7 root /bin/bash /opt/devops/mongodb/crons/cleanup_mongodb.sh \u0026gt;\u0026gt; /opt/devops/mongodb/crons/db_cleanup.log 2\u0026gt;\u0026amp;1 "},{"id":1,"href":"/zh/posts/","title":"博客","section":"介绍","content":""}]
[{"id":0,"href":"/posts/backup-mongodb/","title":"Backup MongoDB","section":"Blog","content":" Introduction # MongoDB is deployed within a Docker container, and an automated backup task is scheduled to run. When the database is running in a container, you can choose to either use a temporary database container or an existing one for performing the backup. The decision between these options depends on personal preference. In this article, I have opted to use a temporary database container.\nUbuntu Version\nlsb_release -a LSB Version: core-11.1.0ubuntu4-noarch:security-11.1.0ubuntu4-noarch Distributor ID: Ubuntu Description: Ubuntu 22.04.2 LTS Release: 22.04 Codename: jammy Bash Version\nbash --version GNU bash, version 5.1.16(1)-release (x86_64-pc-linux-gnu) Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt; Docker Version\nClient: Docker Engine - Community Version: 24.0.1 API version: 1.43 Go version: go1.20.4 Git commit: 6802122 Built: Fri May 19 18:06:21 2023 OS/Arch: linux/amd64 Context: default Server: Docker Engine - Community Engine: Version: 24.0.1 API version: 1.43 (minimum version 1.12) Go version: go1.20.4 Git commit: 463850e Built: Fri May 19 18:06:21 2023 OS/Arch: linux/amd64 Experimental: false containerd: Version: 1.6.21 GitCommit: 3dce8eb055cbb6872793272b4f20ed16117344f8 runc: Version: 1.1.7 GitCommit: v1.1.7-0-g860f061 docker-init: Version: 0.19.0 GitCommit: de40ad0 MongoDB Version\nMongoDB shell version v4.4.19 MongoDB server version: 4.4.19 Steps # Create Backup Script # In this example script, MongoDB has more than one database, and each database has its own user and password protection. Backups are organized by week number and date within folders, and the backups are performed within the Docker container, directly writing to the local storage through a volume. It should be noted that in order to perform backups in another database container, the new container needs to connect to the existing Docker network.\n#!/bin/bash # display environment information echo \u0026#34;$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) - Starting the script...\u0026#34; echo \u0026#34;Current Date and Time: $(date)\u0026#34; echo \u0026#34;Current User: $(whoami)\u0026#34; echo \u0026#34;Current Directory: $(pwd)\u0026#34; echo \u0026#34;Login Shell: $SHELL\u0026#34; echo \u0026#34;\u0026#34; # display system information echo \u0026#34;Operating System: $(uname -s)\u0026#34; echo \u0026#34;Hostname: $(hostname)\u0026#34; echo \u0026#34;Kernel Version: $(uname -r)\u0026#34; echo \u0026#34;Processor Architecture: $(uname -m)\u0026#34; echo \u0026#34;\u0026#34; # def DATE=$(date +%d%m%Y_%H%M) WEEK=$(date +%W) BACKUP_DIR=\u0026#34;/data/db_backup/$WEEK\u0026#34; BACKUP_NAME=\u0026#34;$DATE\u0026#34; COMPRESSED_FILE=\u0026#34;$BACKUP_DIR/${BACKUP_NAME}.tar.gz\u0026#34; # directory permission mkdir -p $BACKUP_DIR/$BACKUP_NAME chown -R 999:999 $BACKUP_DIR/$BACKUP_NAME # define database credentials declare -A credentials=( [\u0026#34;db_name_1\u0026#34;]=\u0026#34;username_1:password_1\u0026#34; [\u0026#34;db_name_2\u0026#34;]=\u0026#34;username_2:password_2\u0026#34; ) # run backup for db_name in \u0026#34;${!credentials[@]}\u0026#34;; do echo \u0026#34;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; start to backup $db_name \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026#34; IFS=\u0026#39;:\u0026#39; read -r username password \u0026lt;\u0026lt;\u0026lt; \u0026#34;${credentials[$db_name]}\u0026#34; docker run -u $(id -u):$(id -g) --rm --network mongodb_mongo_net -v $BACKUP_DIR/$BACKUP_NAME:/workdir -w /workdir \\ mongo:4.4.19 mongodump --out /workdir \\ --db=$db_name --username $username --password $password --host=bewellconnect-mongodb --authenticationDatabase=$db_name echo \u0026#34;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; end to backup $db_name \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026#34; echo \u0026#34;\u0026#34; done # compress echo \u0026#34;compressing backup directory...\u0026#34; tar -czvf $COMPRESSED_FILE -C $BACKUP_DIR $BACKUP_NAME echo \u0026#34;backup directory compressed to: $COMPRESSED_FILE\u0026#34; echo \u0026#34;\u0026#34; # remove uncompressed backup directory echo \u0026#34;removing uncompressed backup directory...\u0026#34; rm -rf $BACKUP_DIR/$BACKUP_NAME echo \u0026#34;uncompressed backup directory removed.\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) - Script execution complete.\u0026#34; Create Cleanup Script # Keep only one week of backups and delete the rest.\n#!/bin/bash # display environment information echo \u0026#34;$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) - Starting the script...\u0026#34; echo \u0026#34;Current Date and Time: $(date)\u0026#34; echo \u0026#34;Current User: $(whoami)\u0026#34; echo \u0026#34;Current Directory: $(pwd)\u0026#34; echo \u0026#34;Login Shell: $SHELL\u0026#34; echo \u0026#34;\u0026#34; # display system information echo \u0026#34;Operating System: $(uname -s)\u0026#34; echo \u0026#34;Hostname: $(hostname)\u0026#34; echo \u0026#34;Kernel Version: $(uname -r)\u0026#34; echo \u0026#34;Processor Architecture: $(uname -m)\u0026#34; echo \u0026#34;\u0026#34; #def BACKUP_DIR=\u0026#34;/data/db_backup\u0026#34; # get current week number current_week=$(date +%W) # run cleanup for dir in \u0026#34;$BACKUP_DIR\u0026#34;/*/; do dir_name=$(basename \u0026#34;$dir\u0026#34;) if [ \u0026#34;${dir_name}\u0026#34; \\\u0026lt; \u0026#34;${current_week}\u0026#34; ]; then echo \u0026#34;delete backup: $dir\u0026#34; rm -rf \u0026#34;$dir\u0026#34; fi done echo \u0026#34;$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) - Script execution complete.\u0026#34; Modify Script Permissions # Cron executes the script under the user who created the task. The permissions can vary depending on the specific scenario. Here, we give the script execute permissions for all users.\nchmod +x script.sh Create Cron File # There are several locations where Cron configurations can be placed. In this case, we create a file named \u0026ldquo;db\u0026rdquo; and place it in the /etc/cron.d/ directory. The standard output and error streams of the script execution are redirected to log files. The backup script runs every day at 3 AM, and the cleanup script runs every Sunday at 4 AM, removing backups older than one week.\n00 03 * * * root /bin/bash /opt/devops/mongodb/crons/backup_mongodb.sh \u0026gt;\u0026gt; /opt/devops/mongodb/crons/db_backup.log 2\u0026gt;\u0026amp;1 00 04 * * 7 root /bin/bash /opt/devops/mongodb/crons/cleanup_mongodb.sh \u0026gt;\u0026gt; /opt/devops/mongodb/crons/db_cleanup.log 2\u0026gt;\u0026amp;1 "},{"id":1,"href":"/posts/","title":"Blog","section":"Introduction","content":""}]